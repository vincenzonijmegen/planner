{"ast":null,"code":"import jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport { dagMap } from \"./dagen\";\nconst dagen = [\"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\", \"zo\"];\nconst shifts = [1, 2];\nconst buildPdfBody = (medewerkers, planning, beschikbaarheid, shiftCountPerMedewerker) => {\n  const body = [];\n  medewerkers.forEach(m => {\n    var _m$maxShifts, _m$leeftijd;\n    const naam = m.naam;\n    const count = shiftCountPerMedewerker[naam] || 0;\n    const max = (_m$maxShifts = m.maxShifts) !== null && _m$maxShifts !== void 0 ? _m$maxShifts : \"?\";\n    const leeftijd = (_m$leeftijd = m.leeftijd) !== null && _m$leeftijd !== void 0 ? _m$leeftijd : \"?\";\n    const row = {\n      Naam: `${naam.split(\" \").map((part, i) => i === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1)).join(\" \")} [${leeftijd}] (${count}/${max})`\n    };\n    dagen.forEach(dag => {\n      shifts.forEach(shift => {\n        var _planning$naam, _planning$naam$dag, _beschikbaarheid$naam, _beschikbaarheid$naam2;\n        const key = `${dag} ${shift}`;\n        const entry = (_planning$naam = planning[naam]) === null || _planning$naam === void 0 ? void 0 : (_planning$naam$dag = _planning$naam[dag]) === null || _planning$naam$dag === void 0 ? void 0 : _planning$naam$dag[shift];\n        const naamKey = naam === null || naam === void 0 ? void 0 : naam.toLowerCase();\n        const beschikbaar = beschikbaarheid === null || beschikbaarheid === void 0 ? void 0 : (_beschikbaarheid$naam = beschikbaarheid[naamKey]) === null || _beschikbaarheid$naam === void 0 ? void 0 : (_beschikbaarheid$naam2 = _beschikbaarheid$naam[dagMap[dag]]) === null || _beschikbaarheid$naam2 === void 0 ? void 0 : _beschikbaarheid$naam2[shift];\n        if (entry) {\n          var _labelMap$entry$funct;\n          const labelMap = {\n            schepper: {\n              vast: \"schep\",\n              standby: \"schep(s)\",\n              laat: \"schep(l)\"\n            },\n            ijsbereider: {\n              vast: \"bereider\",\n              standby: \"bereider(s)\",\n              laat: \"bereider(l)\"\n            },\n            ijsvoorbereider: {\n              vast: \"prep\",\n              standby: \"prep(s)\",\n              laat: \"prep(l)\"\n            }\n          };\n          row[key] = ((_labelMap$entry$funct = labelMap[entry.functie]) === null || _labelMap$entry$funct === void 0 ? void 0 : _labelMap$entry$funct[entry.soort]) || `${entry.functie} (${entry.soort})`;\n        } else if (beschikbaar) {\n          row[key] = \"✓\";\n        } else {\n          row[key] = \"\";\n        }\n      });\n    });\n    body.push(row);\n  });\n  return body;\n};\nexport const exportToPDF = ({\n  medewerkers,\n  planning,\n  beschikbaarheid,\n  loonkostenPerUur,\n  shiftCountPerMedewerker\n}) => {\n  const doc = new jsPDF({\n    orientation: \"landscape\",\n    format: \"a4\"\n  });\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const margin = 20;\n  const tableColumn = [\"Naam\", ...dagen.flatMap(dag => shifts.map(shift => `${dag} ${shift}`))];\n  const body = buildPdfBody(medewerkers, planning, beschikbaarheid, shiftCountPerMedewerker);\n  autoTable(doc, {\n    startY: 20,\n    tableWidth: pageWidth - margin,\n    columns: tableColumn.map(key => ({\n      header: key,\n      dataKey: key\n    })),\n    body,\n    styles: {\n      fontSize: 8,\n      cellPadding: 2,\n      halign: \"center\",\n      valign: \"middle\",\n      lineWidth: 0.1,\n      lineColor: [0, 0, 0]\n    },\n    headStyles: {\n      fillColor: [41, 128, 185],\n      textColor: [255, 255, 255],\n      fontStyle: \"bold\"\n    },\n    columnStyles: {\n      Naam: {\n        halign: \"left\",\n        cellWidth: 60\n      }\n    },\n    didParseCell(data) {\n      const val = typeof data.cell.raw === \"string\" ? data.cell.raw.toLowerCase().trim() : \"\";\n      const kleuren = {\n        \"bereider\": [30, 58, 138],\n        \"bereider(s)\": [96, 165, 250],\n        \"bereider(l)\": [167, 139, 250],\n        \"prep\": [191, 219, 254],\n        \"prep(s)\": [219, 234, 254],\n        \"prep(l)\": [196, 181, 253],\n        \"schep\": [250, 204, 21],\n        \"schep(s)\": [254, 240, 138],\n        \"schep(l)\": [243, 244, 246],\n        \"✓\": [144, 238, 144]\n      };\n      if (kleuren[val]) {\n        data.cell.styles.fillColor = kleuren[val];\n        data.cell.styles.textColor = [\"schep\", \"bereider\", \"schep(s)\", \"bereider(s)\"].includes(val) ? [0, 0, 0] : [0, 0, 0];\n      }\n    }\n  });\n  function addLoonkostenTabel(doc, medewerkers, planning, loonkostenPerUur) {\n    const kolommen = [\"Dag\", ...dagen.flatMap(dag => shifts.map(s => `${dag} shift ${s}`))];\n    const loonkostenPerShift = {};\n    const telling = {\n      ijsbereider: {},\n      ijsvoorbereider: {},\n      schepper: {}\n    };\n    dagen.forEach(dag => {\n      shifts.forEach(shift => {\n        const key = `${dag} shift ${shift}`;\n        loonkostenPerShift[key] = 0;\n        telling.ijsbereider[key] = 0;\n        telling.ijsvoorbereider[key] = 0;\n        telling.schepper[key] = 0;\n        medewerkers.forEach(m => {\n          var _planning$m$naam, _planning$m$naam$dag;\n          const entry = (_planning$m$naam = planning[m.naam]) === null || _planning$m$naam === void 0 ? void 0 : (_planning$m$naam$dag = _planning$m$naam[dag]) === null || _planning$m$naam$dag === void 0 ? void 0 : _planning$m$naam$dag[shift];\n          if (entry) {\n            var _loonkostenPerUur$m$l;\n            const uren = entry.soort === \"standby\" ? 4 : 6;\n            const uurloon = (_loonkostenPerUur$m$l = loonkostenPerUur[m.leeftijd]) !== null && _loonkostenPerUur$m$l !== void 0 ? _loonkostenPerUur$m$l : 15;\n            loonkostenPerShift[key] += uren * uurloon;\n            if (telling[entry.functie]) telling[entry.functie][key]++;\n          }\n        });\n      });\n    });\n    const body = [[\"Loonkosten\", ...kolommen.slice(1).map(key => `€ ${Math.round(loonkostenPerShift[key] || 0)}`)], [\"Bereiders\", ...kolommen.slice(1).map(key => telling.ijsbereider[key] || 0)], [\"Voorbereiders\", ...kolommen.slice(1).map(key => telling.ijsvoorbereider[key] || 0)], [\"Scheppers\", ...kolommen.slice(1).map(key => telling.schepper[key] || 0)]];\n    const startY = doc.lastAutoTable.finalY + 20;\n    autoTable(doc, {\n      startY,\n      head: [kolommen],\n      body,\n      styles: {\n        fontSize: 8,\n        halign: 'center',\n        valign: 'middle',\n        cellPadding: 2,\n        lineWidth: 0.1,\n        lineColor: [0, 0, 0]\n      },\n      headStyles: {\n        fillColor: [100, 149, 237],\n        textColor: 255\n      },\n      columnStyles: {\n        0: {\n          fontStyle: 'bold',\n          halign: 'left'\n        }\n      }\n    });\n  }\n  const laatsteY = doc.lastAutoTable.finalY + 20;\n  doc.setFontSize(12);\n  doc.setTextColor(40);\n  doc.setFont(undefined, \"bold\");\n  const totaalLoonkosten = medewerkers.reduce((totaal, m) => {\n    var _loonkostenPerUur$m$l2;\n    const uurloon = (_loonkostenPerUur$m$l2 = loonkostenPerUur[m.leeftijd]) !== null && _loonkostenPerUur$m$l2 !== void 0 ? _loonkostenPerUur$m$l2 : 15;\n    return totaal + dagen.reduce((dagTotaal, dag) => {\n      return dagTotaal + shifts.reduce((shiftTotaal, shift) => {\n        var _planning$m$naam2, _planning$m$naam2$dag;\n        const entry = (_planning$m$naam2 = planning[m.naam]) === null || _planning$m$naam2 === void 0 ? void 0 : (_planning$m$naam2$dag = _planning$m$naam2[dag]) === null || _planning$m$naam2$dag === void 0 ? void 0 : _planning$m$naam2$dag[shift];\n        if (!entry) return shiftTotaal;\n        const uren = entry.soort === \"standby\" ? 4 : 6;\n        return shiftTotaal + uren * uurloon;\n      }, 0);\n    }, 0);\n  }, 0);\n  addLoonkostenTabel(doc, medewerkers, planning, loonkostenPerUur);\n  doc.text(`Totale loonkosten deze week: €${totaalLoonkosten.toFixed(2)}`, 14, laatsteY);\n  doc.save(\"planning_export.pdf\");\n};","map":{"version":3,"names":["jsPDF","autoTable","dagMap","dagen","shifts","buildPdfBody","medewerkers","planning","beschikbaarheid","shiftCountPerMedewerker","body","forEach","m","_m$maxShifts","_m$leeftijd","naam","count","max","maxShifts","leeftijd","row","Naam","split","map","part","i","charAt","toUpperCase","slice","join","dag","shift","_planning$naam","_planning$naam$dag","_beschikbaarheid$naam","_beschikbaarheid$naam2","key","entry","naamKey","toLowerCase","beschikbaar","_labelMap$entry$funct","labelMap","schepper","vast","standby","laat","ijsbereider","ijsvoorbereider","functie","soort","push","exportToPDF","loonkostenPerUur","doc","orientation","format","pageWidth","internal","pageSize","getWidth","margin","tableColumn","flatMap","startY","tableWidth","columns","header","dataKey","styles","fontSize","cellPadding","halign","valign","lineWidth","lineColor","headStyles","fillColor","textColor","fontStyle","columnStyles","cellWidth","didParseCell","data","val","cell","raw","trim","kleuren","includes","addLoonkostenTabel","kolommen","s","loonkostenPerShift","telling","_planning$m$naam","_planning$m$naam$dag","_loonkostenPerUur$m$l","uren","uurloon","Math","round","lastAutoTable","finalY","head","laatsteY","setFontSize","setTextColor","setFont","undefined","totaalLoonkosten","reduce","totaal","_loonkostenPerUur$m$l2","dagTotaal","shiftTotaal","_planning$m$naam2","_planning$m$naam2$dag","text","toFixed","save"],"sources":["C:/Users/van den Akker/planner/planner-app/src/utils/exportToPDF.js"],"sourcesContent":["import jsPDF from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport { dagMap } from \"./dagen\";\r\n\r\nconst dagen = [\"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\", \"zo\"];\r\nconst shifts = [1, 2];\r\n\r\nconst buildPdfBody = (medewerkers, planning, beschikbaarheid, shiftCountPerMedewerker) => {\r\n  const body = [];\r\n\r\n  medewerkers.forEach((m) => {\r\n    const naam = m.naam;\r\n    const count = shiftCountPerMedewerker[naam] || 0;\r\n    const max = m.maxShifts ?? \"?\";\r\n    const leeftijd = m.leeftijd ?? \"?\";\r\n\r\n    const row = {\r\n      Naam: `${naam.split(\" \").map((part, i) =>\r\n        i === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1)\r\n      ).join(\" \")} [${leeftijd}] (${count}/${max})`\r\n    };\r\n\r\n    dagen.forEach((dag) => {\r\n      shifts.forEach((shift) => {\r\n        const key = `${dag} ${shift}`;\r\n        const entry = planning[naam]?.[dag]?.[shift];\r\n        const naamKey = naam?.toLowerCase();\r\n        const beschikbaar = beschikbaarheid?.[naamKey]?.[dagMap[dag]]?.[shift];\r\n\r\n        if (entry) {\r\n          const labelMap = {\r\n            schepper: { vast: \"schep\", standby: \"schep(s)\", laat: \"schep(l)\" },\r\n            ijsbereider: { vast: \"bereider\", standby: \"bereider(s)\", laat: \"bereider(l)\" },\r\n            ijsvoorbereider: { vast: \"prep\", standby: \"prep(s)\", laat: \"prep(l)\" },\r\n          };\r\n          row[key] = labelMap[entry.functie]?.[entry.soort] || `${entry.functie} (${entry.soort})`;\r\n        } else if (beschikbaar) {\r\n          row[key] = \"✓\";\r\n        } else {\r\n          row[key] = \"\";\r\n        }\r\n      });\r\n    });\r\n\r\n    body.push(row);\r\n  });\r\n\r\n  return body;\r\n};\r\n\r\nexport const exportToPDF = ({ medewerkers, planning, beschikbaarheid, loonkostenPerUur, shiftCountPerMedewerker }) => {\r\n  const doc = new jsPDF({ orientation: \"landscape\", format: \"a4\" });\r\n  const pageWidth = doc.internal.pageSize.getWidth();\r\n  const margin = 20;\r\n\r\n  const tableColumn = [\"Naam\", ...dagen.flatMap((dag) => shifts.map((shift) => `${dag} ${shift}`))];\r\n  const body = buildPdfBody(medewerkers, planning, beschikbaarheid, shiftCountPerMedewerker);\r\n\r\n  autoTable(doc, {\r\n    startY: 20,\r\n    tableWidth: pageWidth - margin,\r\n    columns: tableColumn.map((key) => ({ header: key, dataKey: key })),\r\n    body,\r\n    styles: {\r\n      fontSize: 8,\r\n      cellPadding: 2,\r\n      halign: \"center\",\r\n      valign: \"middle\",\r\n      lineWidth: 0.1,\r\n      lineColor: [0, 0, 0],\r\n    },\r\n    headStyles: {\r\n      fillColor: [41, 128, 185],\r\n      textColor: [255, 255, 255],\r\n      fontStyle: \"bold\",\r\n    },\r\n    columnStyles: {\r\n      Naam: { halign: \"left\", cellWidth: 60 },\r\n    },\r\n    didParseCell(data) {\r\n      const val = typeof data.cell.raw === \"string\" ? data.cell.raw.toLowerCase().trim() : \"\";\r\n\r\n      const kleuren = {\r\n        \"bereider\": [30, 58, 138],\r\n        \"bereider(s)\": [96, 165, 250],\r\n        \"bereider(l)\": [167, 139, 250],\r\n        \"prep\": [191, 219, 254],\r\n        \"prep(s)\": [219, 234, 254],\r\n        \"prep(l)\": [196, 181, 253],\r\n        \"schep\": [250, 204, 21],\r\n        \"schep(s)\": [254, 240, 138],\r\n        \"schep(l)\": [243, 244, 246],\r\n        \"✓\": [144, 238, 144],\r\n      };\r\n\r\n      if (kleuren[val]) {\r\n        data.cell.styles.fillColor = kleuren[val];\r\n        data.cell.styles.textColor = [\"schep\", \"bereider\", \"schep(s)\", \"bereider(s)\"].includes(val)\r\n          ? [0, 0, 0]\r\n          : [0, 0, 0];\r\n      }\r\n    }\r\n  });\r\n\r\n  function addLoonkostenTabel(doc, medewerkers, planning, loonkostenPerUur) {\r\n    const kolommen = [\"Dag\", ...dagen.flatMap(dag => shifts.map(s => `${dag} shift ${s}`))];\r\n  \r\n    const loonkostenPerShift = {};\r\n    const telling = {\r\n      ijsbereider: {},\r\n      ijsvoorbereider: {},\r\n      schepper: {}\r\n    };\r\n  \r\n    dagen.forEach(dag => {\r\n      shifts.forEach(shift => {\r\n        const key = `${dag} shift ${shift}`;\r\n        loonkostenPerShift[key] = 0;\r\n        telling.ijsbereider[key] = 0;\r\n        telling.ijsvoorbereider[key] = 0;\r\n        telling.schepper[key] = 0;\r\n  \r\n        medewerkers.forEach(m => {\r\n          const entry = planning[m.naam]?.[dag]?.[shift];\r\n          if (entry) {\r\n            const uren = entry.soort === \"standby\" ? 4 : 6;\r\n            const uurloon = loonkostenPerUur[m.leeftijd] ?? 15;\r\n            loonkostenPerShift[key] += uren * uurloon;\r\n            if (telling[entry.functie]) telling[entry.functie][key]++;\r\n          }\r\n        });\r\n      });\r\n    });\r\n  \r\n    const body = [\r\n      [\"Loonkosten\", ...kolommen.slice(1).map(key => `€ ${Math.round(loonkostenPerShift[key] || 0)}`)],\r\n      [\"Bereiders\", ...kolommen.slice(1).map(key => telling.ijsbereider[key] || 0)],\r\n      [\"Voorbereiders\", ...kolommen.slice(1).map(key => telling.ijsvoorbereider[key] || 0)],\r\n      [\"Scheppers\", ...kolommen.slice(1).map(key => telling.schepper[key] || 0)],\r\n    ];\r\n  \r\n    const startY = doc.lastAutoTable.finalY + 20;\r\n    autoTable(doc, {\r\n      startY,\r\n      head: [kolommen],\r\n      body,\r\n      styles: {\r\n        fontSize: 8,\r\n        halign: 'center',\r\n        valign: 'middle',\r\n        cellPadding: 2,\r\n        lineWidth: 0.1,\r\n        lineColor: [0, 0, 0],\r\n      },\r\n      headStyles: {\r\n        fillColor: [100, 149, 237],\r\n        textColor: 255,\r\n      },\r\n      columnStyles: { 0: { fontStyle: 'bold', halign: 'left' } },\r\n    });\r\n  }\r\n  \r\n\r\n  const laatsteY = doc.lastAutoTable.finalY + 20;\r\n  doc.setFontSize(12);\r\n  doc.setTextColor(40);\r\n  doc.setFont(undefined, \"bold\");\r\n\r\n  const totaalLoonkosten = medewerkers.reduce((totaal, m) => {\r\n    const uurloon = loonkostenPerUur[m.leeftijd] ?? 15;\r\n    return totaal + dagen.reduce((dagTotaal, dag) => {\r\n      return dagTotaal + shifts.reduce((shiftTotaal, shift) => {\r\n        const entry = planning[m.naam]?.[dag]?.[shift];\r\n        if (!entry) return shiftTotaal;\r\n        const uren = entry.soort === \"standby\" ? 4 : 6;\r\n        return shiftTotaal + uren * uurloon;\r\n      }, 0);\r\n    }, 0);\r\n  }, 0);\r\n  addLoonkostenTabel(doc, medewerkers, planning, loonkostenPerUur);\r\n\r\n  doc.text(`Totale loonkosten deze week: €${totaalLoonkosten.toFixed(2)}`, 14, laatsteY);\r\n  doc.save(\"planning_export.pdf\");\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,MAAM,QAAQ,SAAS;AAEhC,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AACxD,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAErB,MAAMC,YAAY,GAAGA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,uBAAuB,KAAK;EACxF,MAAMC,IAAI,GAAG,EAAE;EAEfJ,WAAW,CAACK,OAAO,CAAEC,CAAC,IAAK;IAAA,IAAAC,YAAA,EAAAC,WAAA;IACzB,MAAMC,IAAI,GAAGH,CAAC,CAACG,IAAI;IACnB,MAAMC,KAAK,GAAGP,uBAAuB,CAACM,IAAI,CAAC,IAAI,CAAC;IAChD,MAAME,GAAG,IAAAJ,YAAA,GAAGD,CAAC,CAACM,SAAS,cAAAL,YAAA,cAAAA,YAAA,GAAI,GAAG;IAC9B,MAAMM,QAAQ,IAAAL,WAAA,GAAGF,CAAC,CAACO,QAAQ,cAAAL,WAAA,cAAAA,WAAA,GAAI,GAAG;IAElC,MAAMM,GAAG,GAAG;MACVC,IAAI,EAAE,GAAGN,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KACnCA,CAAC,KAAK,CAAC,GAAGD,IAAI,GAAGA,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,CAC9D,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,KAAKV,QAAQ,MAAMH,KAAK,IAAIC,GAAG;IAC5C,CAAC;IAEDd,KAAK,CAACQ,OAAO,CAAEmB,GAAG,IAAK;MACrB1B,MAAM,CAACO,OAAO,CAAEoB,KAAK,IAAK;QAAA,IAAAC,cAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QACxB,MAAMC,GAAG,GAAG,GAAGN,GAAG,IAAIC,KAAK,EAAE;QAC7B,MAAMM,KAAK,IAAAL,cAAA,GAAGzB,QAAQ,CAACQ,IAAI,CAAC,cAAAiB,cAAA,wBAAAC,kBAAA,GAAdD,cAAA,CAAiBF,GAAG,CAAC,cAAAG,kBAAA,uBAArBA,kBAAA,CAAwBF,KAAK,CAAC;QAC5C,MAAMO,OAAO,GAAGvB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwB,WAAW,CAAC,CAAC;QACnC,MAAMC,WAAW,GAAGhC,eAAe,aAAfA,eAAe,wBAAA0B,qBAAA,GAAf1B,eAAe,CAAG8B,OAAO,CAAC,cAAAJ,qBAAA,wBAAAC,sBAAA,GAA1BD,qBAAA,CAA6BhC,MAAM,CAAC4B,GAAG,CAAC,CAAC,cAAAK,sBAAA,uBAAzCA,sBAAA,CAA4CJ,KAAK,CAAC;QAEtE,IAAIM,KAAK,EAAE;UAAA,IAAAI,qBAAA;UACT,MAAMC,QAAQ,GAAG;YACfC,QAAQ,EAAE;cAAEC,IAAI,EAAE,OAAO;cAAEC,OAAO,EAAE,UAAU;cAAEC,IAAI,EAAE;YAAW,CAAC;YAClEC,WAAW,EAAE;cAAEH,IAAI,EAAE,UAAU;cAAEC,OAAO,EAAE,aAAa;cAAEC,IAAI,EAAE;YAAc,CAAC;YAC9EE,eAAe,EAAE;cAAEJ,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAE,SAAS;cAAEC,IAAI,EAAE;YAAU;UACvE,CAAC;UACD1B,GAAG,CAACgB,GAAG,CAAC,GAAG,EAAAK,qBAAA,GAAAC,QAAQ,CAACL,KAAK,CAACY,OAAO,CAAC,cAAAR,qBAAA,uBAAvBA,qBAAA,CAA0BJ,KAAK,CAACa,KAAK,CAAC,KAAI,GAAGb,KAAK,CAACY,OAAO,KAAKZ,KAAK,CAACa,KAAK,GAAG;QAC1F,CAAC,MAAM,IAAIV,WAAW,EAAE;UACtBpB,GAAG,CAACgB,GAAG,CAAC,GAAG,GAAG;QAChB,CAAC,MAAM;UACLhB,GAAG,CAACgB,GAAG,CAAC,GAAG,EAAE;QACf;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF1B,IAAI,CAACyC,IAAI,CAAC/B,GAAG,CAAC;EAChB,CAAC,CAAC;EAEF,OAAOV,IAAI;AACb,CAAC;AAED,OAAO,MAAM0C,WAAW,GAAGA,CAAC;EAAE9C,WAAW;EAAEC,QAAQ;EAAEC,eAAe;EAAE6C,gBAAgB;EAAE5C;AAAwB,CAAC,KAAK;EACpH,MAAM6C,GAAG,GAAG,IAAItD,KAAK,CAAC;IAAEuD,WAAW,EAAE,WAAW;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EACjE,MAAMC,SAAS,GAAGH,GAAG,CAACI,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;EAClD,MAAMC,MAAM,GAAG,EAAE;EAEjB,MAAMC,WAAW,GAAG,CAAC,MAAM,EAAE,GAAG3D,KAAK,CAAC4D,OAAO,CAAEjC,GAAG,IAAK1B,MAAM,CAACmB,GAAG,CAAEQ,KAAK,IAAK,GAAGD,GAAG,IAAIC,KAAK,EAAE,CAAC,CAAC,CAAC;EACjG,MAAMrB,IAAI,GAAGL,YAAY,CAACC,WAAW,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,uBAAuB,CAAC;EAE1FR,SAAS,CAACqD,GAAG,EAAE;IACbU,MAAM,EAAE,EAAE;IACVC,UAAU,EAAER,SAAS,GAAGI,MAAM;IAC9BK,OAAO,EAAEJ,WAAW,CAACvC,GAAG,CAAEa,GAAG,KAAM;MAAE+B,MAAM,EAAE/B,GAAG;MAAEgC,OAAO,EAAEhC;IAAI,CAAC,CAAC,CAAC;IAClE1B,IAAI;IACJ2D,MAAM,EAAE;MACNC,QAAQ,EAAE,CAAC;MACXC,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE,QAAQ;MAChBC,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE,GAAG;MACdC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE;MACVC,SAAS,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;MACzBC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAC1BC,SAAS,EAAE;IACb,CAAC;IACDC,YAAY,EAAE;MACZ3D,IAAI,EAAE;QAAEmD,MAAM,EAAE,MAAM;QAAES,SAAS,EAAE;MAAG;IACxC,CAAC;IACDC,YAAYA,CAACC,IAAI,EAAE;MACjB,MAAMC,GAAG,GAAG,OAAOD,IAAI,CAACE,IAAI,CAACC,GAAG,KAAK,QAAQ,GAAGH,IAAI,CAACE,IAAI,CAACC,GAAG,CAAC/C,WAAW,CAAC,CAAC,CAACgD,IAAI,CAAC,CAAC,GAAG,EAAE;MAEvF,MAAMC,OAAO,GAAG;QACd,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;QACzB,aAAa,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;QAC7B,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC9B,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QACvB,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC1B,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC1B,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;QACvB,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC3B,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC3B,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;MACrB,CAAC;MAED,IAAIA,OAAO,CAACJ,GAAG,CAAC,EAAE;QAChBD,IAAI,CAACE,IAAI,CAAChB,MAAM,CAACQ,SAAS,GAAGW,OAAO,CAACJ,GAAG,CAAC;QACzCD,IAAI,CAACE,IAAI,CAAChB,MAAM,CAACS,SAAS,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,CAAC,CAACW,QAAQ,CAACL,GAAG,CAAC,GACvF,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IACF;EACF,CAAC,CAAC;EAEF,SAASM,kBAAkBA,CAACpC,GAAG,EAAEhD,WAAW,EAAEC,QAAQ,EAAE8C,gBAAgB,EAAE;IACxE,MAAMsC,QAAQ,GAAG,CAAC,KAAK,EAAE,GAAGxF,KAAK,CAAC4D,OAAO,CAACjC,GAAG,IAAI1B,MAAM,CAACmB,GAAG,CAACqE,CAAC,IAAI,GAAG9D,GAAG,UAAU8D,CAAC,EAAE,CAAC,CAAC,CAAC;IAEvF,MAAMC,kBAAkB,GAAG,CAAC,CAAC;IAC7B,MAAMC,OAAO,GAAG;MACd/C,WAAW,EAAE,CAAC,CAAC;MACfC,eAAe,EAAE,CAAC,CAAC;MACnBL,QAAQ,EAAE,CAAC;IACb,CAAC;IAEDxC,KAAK,CAACQ,OAAO,CAACmB,GAAG,IAAI;MACnB1B,MAAM,CAACO,OAAO,CAACoB,KAAK,IAAI;QACtB,MAAMK,GAAG,GAAG,GAAGN,GAAG,UAAUC,KAAK,EAAE;QACnC8D,kBAAkB,CAACzD,GAAG,CAAC,GAAG,CAAC;QAC3B0D,OAAO,CAAC/C,WAAW,CAACX,GAAG,CAAC,GAAG,CAAC;QAC5B0D,OAAO,CAAC9C,eAAe,CAACZ,GAAG,CAAC,GAAG,CAAC;QAChC0D,OAAO,CAACnD,QAAQ,CAACP,GAAG,CAAC,GAAG,CAAC;QAEzB9B,WAAW,CAACK,OAAO,CAACC,CAAC,IAAI;UAAA,IAAAmF,gBAAA,EAAAC,oBAAA;UACvB,MAAM3D,KAAK,IAAA0D,gBAAA,GAAGxF,QAAQ,CAACK,CAAC,CAACG,IAAI,CAAC,cAAAgF,gBAAA,wBAAAC,oBAAA,GAAhBD,gBAAA,CAAmBjE,GAAG,CAAC,cAAAkE,oBAAA,uBAAvBA,oBAAA,CAA0BjE,KAAK,CAAC;UAC9C,IAAIM,KAAK,EAAE;YAAA,IAAA4D,qBAAA;YACT,MAAMC,IAAI,GAAG7D,KAAK,CAACa,KAAK,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;YAC9C,MAAMiD,OAAO,IAAAF,qBAAA,GAAG5C,gBAAgB,CAACzC,CAAC,CAACO,QAAQ,CAAC,cAAA8E,qBAAA,cAAAA,qBAAA,GAAI,EAAE;YAClDJ,kBAAkB,CAACzD,GAAG,CAAC,IAAI8D,IAAI,GAAGC,OAAO;YACzC,IAAIL,OAAO,CAACzD,KAAK,CAACY,OAAO,CAAC,EAAE6C,OAAO,CAACzD,KAAK,CAACY,OAAO,CAAC,CAACb,GAAG,CAAC,EAAE;UAC3D;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAM1B,IAAI,GAAG,CACX,CAAC,YAAY,EAAE,GAAGiF,QAAQ,CAAC/D,KAAK,CAAC,CAAC,CAAC,CAACL,GAAG,CAACa,GAAG,IAAI,KAAKgE,IAAI,CAACC,KAAK,CAACR,kBAAkB,CAACzD,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAChG,CAAC,WAAW,EAAE,GAAGuD,QAAQ,CAAC/D,KAAK,CAAC,CAAC,CAAC,CAACL,GAAG,CAACa,GAAG,IAAI0D,OAAO,CAAC/C,WAAW,CAACX,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAC7E,CAAC,eAAe,EAAE,GAAGuD,QAAQ,CAAC/D,KAAK,CAAC,CAAC,CAAC,CAACL,GAAG,CAACa,GAAG,IAAI0D,OAAO,CAAC9C,eAAe,CAACZ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EACrF,CAAC,WAAW,EAAE,GAAGuD,QAAQ,CAAC/D,KAAK,CAAC,CAAC,CAAC,CAACL,GAAG,CAACa,GAAG,IAAI0D,OAAO,CAACnD,QAAQ,CAACP,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAC3E;IAED,MAAM4B,MAAM,GAAGV,GAAG,CAACgD,aAAa,CAACC,MAAM,GAAG,EAAE;IAC5CtG,SAAS,CAACqD,GAAG,EAAE;MACbU,MAAM;MACNwC,IAAI,EAAE,CAACb,QAAQ,CAAC;MAChBjF,IAAI;MACJ2D,MAAM,EAAE;QACNC,QAAQ,EAAE,CAAC;QACXE,MAAM,EAAE,QAAQ;QAChBC,MAAM,EAAE,QAAQ;QAChBF,WAAW,EAAE,CAAC;QACdG,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MACrB,CAAC;MACDC,UAAU,EAAE;QACVC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC1BC,SAAS,EAAE;MACb,CAAC;MACDE,YAAY,EAAE;QAAE,CAAC,EAAE;UAAED,SAAS,EAAE,MAAM;UAAEP,MAAM,EAAE;QAAO;MAAE;IAC3D,CAAC,CAAC;EACJ;EAGA,MAAMiC,QAAQ,GAAGnD,GAAG,CAACgD,aAAa,CAACC,MAAM,GAAG,EAAE;EAC9CjD,GAAG,CAACoD,WAAW,CAAC,EAAE,CAAC;EACnBpD,GAAG,CAACqD,YAAY,CAAC,EAAE,CAAC;EACpBrD,GAAG,CAACsD,OAAO,CAACC,SAAS,EAAE,MAAM,CAAC;EAE9B,MAAMC,gBAAgB,GAAGxG,WAAW,CAACyG,MAAM,CAAC,CAACC,MAAM,EAAEpG,CAAC,KAAK;IAAA,IAAAqG,sBAAA;IACzD,MAAMd,OAAO,IAAAc,sBAAA,GAAG5D,gBAAgB,CAACzC,CAAC,CAACO,QAAQ,CAAC,cAAA8F,sBAAA,cAAAA,sBAAA,GAAI,EAAE;IAClD,OAAOD,MAAM,GAAG7G,KAAK,CAAC4G,MAAM,CAAC,CAACG,SAAS,EAAEpF,GAAG,KAAK;MAC/C,OAAOoF,SAAS,GAAG9G,MAAM,CAAC2G,MAAM,CAAC,CAACI,WAAW,EAAEpF,KAAK,KAAK;QAAA,IAAAqF,iBAAA,EAAAC,qBAAA;QACvD,MAAMhF,KAAK,IAAA+E,iBAAA,GAAG7G,QAAQ,CAACK,CAAC,CAACG,IAAI,CAAC,cAAAqG,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAmBtF,GAAG,CAAC,cAAAuF,qBAAA,uBAAvBA,qBAAA,CAA0BtF,KAAK,CAAC;QAC9C,IAAI,CAACM,KAAK,EAAE,OAAO8E,WAAW;QAC9B,MAAMjB,IAAI,GAAG7D,KAAK,CAACa,KAAK,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;QAC9C,OAAOiE,WAAW,GAAGjB,IAAI,GAAGC,OAAO;MACrC,CAAC,EAAE,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,EAAE,CAAC,CAAC;EACLT,kBAAkB,CAACpC,GAAG,EAAEhD,WAAW,EAAEC,QAAQ,EAAE8C,gBAAgB,CAAC;EAEhEC,GAAG,CAACgE,IAAI,CAAC,iCAAiCR,gBAAgB,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAEd,QAAQ,CAAC;EACtFnD,GAAG,CAACkE,IAAI,CAAC,qBAAqB,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}